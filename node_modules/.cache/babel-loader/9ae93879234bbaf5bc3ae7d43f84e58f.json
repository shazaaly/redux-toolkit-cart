{"ast":null,"code":"import { useSelector } from \"react-redux\";\nconst {\n  createSlice\n} = require(\"@reduxjs/toolkit\");\nconst initialState = {\n  items: [],\n  totalQuantity: 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      state.totalQuantity++;\n      // check if item previously added so increase its count//\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          name: newItem.title,\n          quantity: 1,\n          price: newItem.price,\n          totalPrice: newItem.price\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + existingItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      //at remove we  need only the id in payload\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.items.totalQuantity--;\n      if (existingItem) {\n        //if quant = 1 remove item from items[], if more decrease it by one //\n        if (existingItem.item === 1) {\n          state.items.filter(item => item.id != existingItem.id);\n        }\n      } else {\n        existingItem.quantity--;\n        existingItem.price = existingItem.totalPrice - existingItem.price;\n      }\n    },\n    RemoveAll() {},\n    getItemsPrice() {},\n    getTotal() {}\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["useSelector","createSlice","require","initialState","items","totalQuantity","cartSlice","name","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","title","quantity","price","totalPrice","removeItemFromCart","filter","RemoveAll","getItemsPrice","getTotal","cartActions","actions","reducer"],"sources":["C:/Users/Dell/Desktop/Lectures/ReactLectures/reduxasync/src/store/cart-slice.js"],"sourcesContent":["import { useSelector } from \"react-redux\";\r\n\r\nconst { createSlice } = require(\"@reduxjs/toolkit\");\r\n\r\nconst initialState = {\r\n    items: [],\r\n    totalQuantity: 0,\r\n\r\n}\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState,\r\n    reducers: {\r\n        addItemToCart(state, action) {\r\n            const newItem = action.payload\r\n            state.totalQuantity ++\r\n            // check if item previously added so increase its count//\r\n            const existingItem = state.items.find(item => item.id === newItem.id)\r\n            if (!existingItem) {\r\n                state.items.push({\r\n                    id: newItem.id,\r\n                    name: newItem.title,\r\n                    quantity: 1,\r\n                    price: newItem.price,\r\n                    totalPrice: newItem.price\r\n                })\r\n\r\n            } else {\r\n                existingItem.quantity++\r\n                existingItem.totalPrice = existingItem.totalPrice + existingItem.price\r\n\r\n            }\r\n\r\n        },\r\n        removeItemFromCart(state, action) {\r\n            //at remove we  need only the id in payload\r\n            const id = action.payload\r\n            const existingItem = state.items.find(item => item.id === newItem.id)\r\n            state.items.totalQuantity --\r\n\r\n            if (existingItem) {\r\n                //if quant = 1 remove item from items[], if more decrease it by one //\r\n                if ( existingItem.item === 1) {\r\n                    state.items.filter(item => item.id != existingItem.id)\r\n                    \r\n                }\r\n                \r\n            } else {\r\n                existingItem.quantity--\r\n                existingItem.price = existingItem.totalPrice - existingItem.price\r\n                \r\n\r\n\r\n            }\r\n\r\n\r\n\r\n        },\r\n        RemoveAll() { },\r\n        getItemsPrice() { },\r\n        getTotal() { },\r\n    }\r\n\r\n})\r\nexport const cartActions = cartSlice.actions\r\nexport default cartSlice.reducer\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,aAAa;AAEzC,MAAM;EAAEC;AAAY,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAEnD,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,EAAE;EACTC,aAAa,EAAE;AAEnB,CAAC;AAED,MAAMC,SAAS,GAAGL,WAAW,CAAC;EAC1BM,IAAI,EAAE,MAAM;EACZJ,YAAY;EACZK,QAAQ,EAAE;IACNC,aAAa,CAACC,KAAK,EAAEC,MAAM,EAAE;MACzB,MAAMC,OAAO,GAAGD,MAAM,CAACE,OAAO;MAC9BH,KAAK,CAACL,aAAa,EAAG;MACtB;MACA,MAAMS,YAAY,GAAGJ,KAAK,CAACN,KAAK,CAACW,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;MACrE,IAAI,CAACH,YAAY,EAAE;QACfJ,KAAK,CAACN,KAAK,CAACc,IAAI,CAAC;UACbD,EAAE,EAAEL,OAAO,CAACK,EAAE;UACdV,IAAI,EAAEK,OAAO,CAACO,KAAK;UACnBC,QAAQ,EAAE,CAAC;UACXC,KAAK,EAAET,OAAO,CAACS,KAAK;UACpBC,UAAU,EAAEV,OAAO,CAACS;QACxB,CAAC,CAAC;MAEN,CAAC,MAAM;QACHP,YAAY,CAACM,QAAQ,EAAE;QACvBN,YAAY,CAACQ,UAAU,GAAGR,YAAY,CAACQ,UAAU,GAAGR,YAAY,CAACO,KAAK;MAE1E;IAEJ,CAAC;IACDE,kBAAkB,CAACb,KAAK,EAAEC,MAAM,EAAE;MAC9B;MACA,MAAMM,EAAE,GAAGN,MAAM,CAACE,OAAO;MACzB,MAAMC,YAAY,GAAGJ,KAAK,CAACN,KAAK,CAACW,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;MACrEP,KAAK,CAACN,KAAK,CAACC,aAAa,EAAG;MAE5B,IAAIS,YAAY,EAAE;QACd;QACA,IAAKA,YAAY,CAACE,IAAI,KAAK,CAAC,EAAE;UAC1BN,KAAK,CAACN,KAAK,CAACoB,MAAM,CAACR,IAAI,IAAIA,IAAI,CAACC,EAAE,IAAIH,YAAY,CAACG,EAAE,CAAC;QAE1D;MAEJ,CAAC,MAAM;QACHH,YAAY,CAACM,QAAQ,EAAE;QACvBN,YAAY,CAACO,KAAK,GAAGP,YAAY,CAACQ,UAAU,GAAGR,YAAY,CAACO,KAAK;MAIrE;IAIJ,CAAC;IACDI,SAAS,GAAG,CAAE,CAAC;IACfC,aAAa,GAAG,CAAE,CAAC;IACnBC,QAAQ,GAAG,CAAE;EACjB;AAEJ,CAAC,CAAC;AACF,OAAO,MAAMC,WAAW,GAAGtB,SAAS,CAACuB,OAAO;AAC5C,eAAevB,SAAS,CAACwB,OAAO"},"metadata":{},"sourceType":"module"}